// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteUser, username)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users(username, password, email, role_id)
VALUES ($1, $2, $3, (SELECT id FROM roles WHERE name = $4))
`

type InsertUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
	RoleName string `json:"role_name"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.RoleName,
	)
	return err
}

const userByUsernameOrEmail = `-- name: UserByUsernameOrEmail :one
SELECT id, date_created, username, password, email, summary, avatar_image_id, role_id, favorite_list FROM users
WHERE username = $1
    OR email = $1
FETCH FIRST ROWS ONLY
`

func (q *Queries) UserByUsernameOrEmail(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, userByUsernameOrEmail, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DateCreated,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Summary,
		&i.AvatarImageID,
		&i.RoleID,
		&i.FavoriteList,
	)
	return i, err
}
