// Code generated by sqlc. DO NOT EDIT.
// source: likes.sql

package db

import (
	"context"
)

const downsertLikes = `-- name: DownsertLikes :exec
INSERT INTO book_group_likes(user_id, book_group_id, point)
VALUES ($1, $2, 0)
ON CONFLICT (user_id, book_group_id)
DO UPDATE SET point = point - 1
`

type DownsertLikesParams struct {
	UserID      int32 `json:"user_id"`
	BookGroupID int32 `json:"book_group_id"`
}

func (q *Queries) DownsertLikes(ctx context.Context, arg DownsertLikesParams) error {
	_, err := q.db.Exec(ctx, downsertLikes, arg.UserID, arg.BookGroupID)
	return err
}

const getLikes = `-- name: GetLikes :one
SELECT point FROM book_group_likes WHERE user_id = $1 AND book_group_id = $2
`

type GetLikesParams struct {
	UserID      int32 `json:"user_id"`
	BookGroupID int32 `json:"book_group_id"`
}

func (q *Queries) GetLikes(ctx context.Context, arg GetLikesParams) (int32, error) {
	row := q.db.QueryRow(ctx, getLikes, arg.UserID, arg.BookGroupID)
	var point int32
	err := row.Scan(&point)
	return point, err
}

const upsertLikes = `-- name: UpsertLikes :exec
INSERT INTO book_group_likes(user_id, book_group_id, point)
VALUES ($1, $2, 0)
ON CONFLICT (user_id, book_group_id)
DO UPDATE SET point = point + 1
`

type UpsertLikesParams struct {
	UserID      int32 `json:"user_id"`
	BookGroupID int32 `json:"book_group_id"`
}

func (q *Queries) UpsertLikes(ctx context.Context, arg UpsertLikesParams) error {
	_, err := q.db.Exec(ctx, upsertLikes, arg.UserID, arg.BookGroupID)
	return err
}
