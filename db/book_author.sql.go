// Code generated by sqlc. DO NOT EDIT.
// source: book_author.sql

package db

import (
	"context"
	"database/sql"
)

const bookAuthorById = `-- name: BookAuthorById :one
SELECT id, name, description, avatar_image_id
FROM book_authors
WHERE id = $1
`

func (q *Queries) BookAuthorById(ctx context.Context, id int32) (BookAuthor, error) {
	row := q.db.QueryRow(ctx, bookAuthorById, id)
	var i BookAuthor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AvatarImageID,
	)
	return i, err
}

const bookAuthors = `-- name: BookAuthors :many
SELECT id, name, description, avatar_image_id
FROM book_authors
ORDER BY id ASC
OFFSET $1 ROWS FETCH FIRST $2 ROWS ONLY
`

type BookAuthorsParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) BookAuthors(ctx context.Context, arg BookAuthorsParams) ([]BookAuthor, error) {
	rows, err := q.db.Query(ctx, bookAuthors, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookAuthor
	for rows.Next() {
		var i BookAuthor
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.AvatarImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const checkAuthorExistById = `-- name: CheckAuthorExistById :one
SELECT EXISTS(
               SELECT 1
               FROM book_authors
               WHERE id = $1
           )
`

func (q *Queries) CheckAuthorExistById(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, checkAuthorExistById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkAuthorExistByName = `-- name: CheckAuthorExistByName :one
SELECT EXISTS(
               SELECT 1
               FROM book_authors
               WHERE name = $1
           )
`

func (q *Queries) CheckAuthorExistByName(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRow(ctx, checkAuthorExistByName, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteBookAuthor = `-- name: DeleteBookAuthor :exec
DELETE
FROM book_authors
WHERE id = $1
`

func (q *Queries) DeleteBookAuthor(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBookAuthor, id)
	return err
}

const getBookGroupAuthors = `-- name: GetBookGroupAuthors :many
SELECT book_authors.id, book_authors.name
FROM book_authors
         JOIN book_group_authors bga on book_authors.id = bga.book_author_id
         JOIN book_groups bg on bga.book_group_id = bg.id
WHERE bg.id = $1
`

type GetBookGroupAuthorsRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetBookGroupAuthors(ctx context.Context, id int32) ([]GetBookGroupAuthorsRow, error) {
	rows, err := q.db.Query(ctx, getBookGroupAuthors, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookGroupAuthorsRow
	for rows.Next() {
		var i GetBookGroupAuthorsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBookAuthor = `-- name: InsertBookAuthor :one
INSERT INTO book_authors(name, description, avatar_image_id)
VALUES ($1, $2, $3)
RETURNING id, name, description, avatar_image_id
`

type InsertBookAuthorParams struct {
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	AvatarImageID sql.NullInt32  `json:"avatarImageID"`
}

func (q *Queries) InsertBookAuthor(ctx context.Context, arg InsertBookAuthorParams) (BookAuthor, error) {
	row := q.db.QueryRow(ctx, insertBookAuthor, arg.Name, arg.Description, arg.AvatarImageID)
	var i BookAuthor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AvatarImageID,
	)
	return i, err
}

const searchAuthors = `-- name: SearchAuthors :many
SELECT book_authors.name, book_authors.id, i.path
FROM book_authors
         LEFT JOIN images i on book_authors.avatar_image_id = i.id
WHERE book_authors.name ILIKE '%' || $1 || '%'
LIMIT 5
`

type SearchAuthorsRow struct {
	Name string         `json:"name"`
	ID   int32          `json:"id"`
	Path sql.NullString `json:"path"`
}

func (q *Queries) SearchAuthors(ctx context.Context, dollar_1 sql.NullString) ([]SearchAuthorsRow, error) {
	rows, err := q.db.Query(ctx, searchAuthors, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchAuthorsRow
	for rows.Next() {
		var i SearchAuthorsRow
		if err := rows.Scan(&i.Name, &i.ID, &i.Path); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookAuthor = `-- name: UpdateBookAuthor :exec
UPDATE book_authors
SET name            = $2,
    description     = $3,
    avatar_image_id = $4
WHERE id = $1
`

type UpdateBookAuthorParams struct {
	ID            int32          `json:"id"`
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	AvatarImageID sql.NullInt32  `json:"avatarImageID"`
}

func (q *Queries) UpdateBookAuthor(ctx context.Context, arg UpdateBookAuthorParams) error {
	_, err := q.db.Exec(ctx, updateBookAuthor,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.AvatarImageID,
	)
	return err
}
