// Code generated by sqlc. DO NOT EDIT.
// source: book_group_author.sql

package db

import (
	"context"
)

const authorsByBookGroup = `-- name: AuthorsByBookGroup :many
SELECT bga.book_author_id
FROM book_group_authors AS bga
WHERE bga.book_group_id = $1
ORDER BY bga.book_author_id
OFFSET $2
    ROWS FETCH FIRST $3 ROWS ONLY
`

type AuthorsByBookGroupParams struct {
	BookGroupID int32 `json:"bookGroupID"`
	Offset      int32 `json:"offset"`
	Limit       int32 `json:"limit"`
}

func (q *Queries) AuthorsByBookGroup(ctx context.Context, arg AuthorsByBookGroupParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, authorsByBookGroup, arg.BookGroupID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var book_author_id int32
		if err := rows.Scan(&book_author_id); err != nil {
			return nil, err
		}
		items = append(items, book_author_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const bookGroupAuthor = `-- name: BookGroupAuthor :one
SELECT EXISTS(
   SELECT 1
   FROM book_group_authors
   WHERE book_group_id = $1
     AND book_author_id = $2
)
`

type BookGroupAuthorParams struct {
	BookGroupID  int32 `json:"bookGroupID"`
	BookAuthorID int32 `json:"bookAuthorID"`
}

func (q *Queries) BookGroupAuthor(ctx context.Context, arg BookGroupAuthorParams) (bool, error) {
	row := q.db.QueryRow(ctx, bookGroupAuthor, arg.BookGroupID, arg.BookAuthorID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const bookGroupsByAuthor = `-- name: BookGroupsByAuthor :many
SELECT bga.book_group_id
FROM book_group_authors AS bga
WHERE bga.book_author_id = $1
ORDER BY bga.book_group_id
OFFSET $2 ROWS
    FETCH FIRST $3 ROWS ONLY
`

type BookGroupsByAuthorParams struct {
	BookAuthorID int32 `json:"bookAuthorID"`
	Offset       int32 `json:"offset"`
	Limit        int32 `json:"limit"`
}

func (q *Queries) BookGroupsByAuthor(ctx context.Context, arg BookGroupsByAuthorParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, bookGroupsByAuthor, arg.BookAuthorID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var book_group_id int32
		if err := rows.Scan(&book_group_id); err != nil {
			return nil, err
		}
		items = append(items, book_group_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const delBookGroupAuthorsByAuthor = `-- name: DelBookGroupAuthorsByAuthor :exec
DELETE
FROM book_group_authors
WHERE book_author_id = $1
`

func (q *Queries) DelBookGroupAuthorsByAuthor(ctx context.Context, bookAuthorID int32) error {
	_, err := q.db.Exec(ctx, delBookGroupAuthorsByAuthor, bookAuthorID)
	return err
}

const delBookGroupAuthorsByBookGroup = `-- name: DelBookGroupAuthorsByBookGroup :exec
DELETE
FROM book_group_authors
WHERE book_group_id = $1
`

func (q *Queries) DelBookGroupAuthorsByBookGroup(ctx context.Context, bookGroupID int32) error {
	_, err := q.db.Exec(ctx, delBookGroupAuthorsByBookGroup, bookGroupID)
	return err
}

const deleteBookGroupAuthor = `-- name: DeleteBookGroupAuthor :exec
DELETE
FROM book_group_authors
WHERE book_group_id = $1
  AND book_author_id = $2
`

type DeleteBookGroupAuthorParams struct {
	BookGroupID  int32 `json:"bookGroupID"`
	BookAuthorID int32 `json:"bookAuthorID"`
}

func (q *Queries) DeleteBookGroupAuthor(ctx context.Context, arg DeleteBookGroupAuthorParams) error {
	_, err := q.db.Exec(ctx, deleteBookGroupAuthor, arg.BookGroupID, arg.BookAuthorID)
	return err
}

const insertBookGroupAuthor = `-- name: InsertBookGroupAuthor :one
INSERT INTO book_group_authors(book_group_id, book_author_id)
VALUES ($1, $2)
RETURNING book_group_id, book_author_id
`

type InsertBookGroupAuthorParams struct {
	BookGroupID  int32 `json:"bookGroupID"`
	BookAuthorID int32 `json:"bookAuthorID"`
}

func (q *Queries) InsertBookGroupAuthor(ctx context.Context, arg InsertBookGroupAuthorParams) (BookGroupAuthor, error) {
	row := q.db.QueryRow(ctx, insertBookGroupAuthor, arg.BookGroupID, arg.BookAuthorID)
	var i BookGroupAuthor
	err := row.Scan(&i.BookGroupID, &i.BookAuthorID)
	return i, err
}
