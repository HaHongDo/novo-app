// Code generated by sqlc. DO NOT EDIT.
// source: book_group.sql

package db

import (
	"context"
	"database/sql"
)

const deleteBookGroup = `-- name: DeleteBookGroup :exec
DELETE FROM book_groups
WHERE title = $1
`

func (q *Queries) DeleteBookGroup(ctx context.Context, title string) error {
	_, err := q.db.Exec(ctx, deleteBookGroup, title)
	return err
}

const getBookGroup = `-- name: GetBookGroup :one
SELECT title, description, date_created,
       (SELECT user_name FROM users WHERE id = ownerid) AS ownerName
FROM book_groups
WHERE title = $1
FETCH FIRST ROWS ONLY
`

type GetBookGroupRow struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	DateCreated sql.NullTime   `json:"date_created"`
	Ownername   string         `json:"ownername"`
}

func (q *Queries) GetBookGroup(ctx context.Context, title string) (GetBookGroupRow, error) {
	row := q.db.QueryRow(ctx, getBookGroup, title)
	var i GetBookGroupRow
	err := row.Scan(
		&i.Title,
		&i.Description,
		&i.DateCreated,
		&i.Ownername,
	)
	return i, err
}

const getListBookGroup = `-- name: GetListBookGroup :many
SELECT title, description, date_created,
       (SELECT user_name FROM users WHERE id = ownerid) AS ownerName
FROM book_groups
FETCH FIRST $1 ROWS ONLY
`

type GetListBookGroupRow struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	DateCreated sql.NullTime   `json:"date_created"`
	Ownername   string         `json:"ownername"`
}

func (q *Queries) GetListBookGroup(ctx context.Context, limit int32) ([]GetListBookGroupRow, error) {
	rows, err := q.db.Query(ctx, getListBookGroup, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListBookGroupRow
	for rows.Next() {
		var i GetListBookGroupRow
		if err := rows.Scan(
			&i.Title,
			&i.Description,
			&i.DateCreated,
			&i.Ownername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBookGroup = `-- name: InsertBookGroup :exec
INSERT INTO book_groups(title, description,ownerid)
VALUES ($1, $2,(SELECT id FROM users WHERE user_name = $3))
`

type InsertBookGroupParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	OwnerName   string         `json:"owner_name"`
}

func (q *Queries) InsertBookGroup(ctx context.Context, arg InsertBookGroupParams) error {
	_, err := q.db.Exec(ctx, insertBookGroup, arg.Title, arg.Description, arg.OwnerName)
	return err
}

const updateAuthorBookGroup = `-- name: UpdateAuthorBookGroup :exec
UPDATE book_groups
SET ownerid = (SELECT id FROM users WHERE user_name = $1)
WHERE title = $2
`

type UpdateAuthorBookGroupParams struct {
	NewUserName string `json:"new_user_name"`
	Title       string `json:"title"`
}

func (q *Queries) UpdateAuthorBookGroup(ctx context.Context, arg UpdateAuthorBookGroupParams) error {
	_, err := q.db.Exec(ctx, updateAuthorBookGroup, arg.NewUserName, arg.Title)
	return err
}

const updateDescBookGroup = `-- name: UpdateDescBookGroup :exec
UPDATE book_groups
SET description = $1
WHERE title = $2
`

type UpdateDescBookGroupParams struct {
	NewDescription sql.NullString `json:"new_description"`
	Title          string         `json:"title"`
}

func (q *Queries) UpdateDescBookGroup(ctx context.Context, arg UpdateDescBookGroupParams) error {
	_, err := q.db.Exec(ctx, updateDescBookGroup, arg.NewDescription, arg.Title)
	return err
}

const updateTitleBookGroup = `-- name: UpdateTitleBookGroup :exec
UPDATE book_groups
SET title = $1
WHERE title = $2
`

type UpdateTitleBookGroupParams struct {
	NewTitle string `json:"new_title"`
	OldTitle string `json:"old_title"`
}

func (q *Queries) UpdateTitleBookGroup(ctx context.Context, arg UpdateTitleBookGroupParams) error {
	_, err := q.db.Exec(ctx, updateTitleBookGroup, arg.NewTitle, arg.OldTitle)
	return err
}
