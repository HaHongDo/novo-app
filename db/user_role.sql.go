// Code generated by sqlc. DO NOT EDIT.
// source: user_role.sql

package db

import (
	"context"
	"database/sql"
)

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE name = $1
`

func (q *Queries) DeleteRole(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteRole, name)
	return err
}

const insertNewRole = `-- name: InsertNewRole :one
INSERT INTO roles (name, description)
VALUES ($1, $2)
RETURNING id, name, description
`

type InsertNewRoleParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) InsertNewRole(ctx context.Context, arg InsertNewRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, insertNewRole, arg.Name, arg.Description)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const roleActionsById = `-- name: RoleActionsById :many
SELECT module || '.' || action FROM role_actions ra
WHERE ra.role_id = $1
`

func (q *Queries) RoleActionsById(ctx context.Context, roleID int32) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, roleActionsById, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const roleIdByName = `-- name: RoleIdByName :one
SELECT id FROM roles
WHERE name = $1
FETCH FIRST ROWS ONLY
`

func (q *Queries) RoleIdByName(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, roleIdByName, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}
